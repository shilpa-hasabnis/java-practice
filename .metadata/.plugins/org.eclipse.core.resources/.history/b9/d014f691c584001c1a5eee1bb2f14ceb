package hackerRankCG;
	import java.io.*;
	import java.math.*;
	import java.security.*;
	import java.text.*;
	import java.util.*;
	import java.util.concurrent.*;
	import java.util.regex.*;


	class esult {

	    /*
	     * Complete the 'maxMin' function below.
	     *
	     * The function is expected to return a LONG_INTEGER_ARRAY.
	     * The function accepts following parameters:
	     *  1. STRING_ARRAY operations
	     *  2. INTEGER_ARRAY x
	     */

	    public static List<Long> maxMin(List<String> operations, List<Integer> x) {
	    	List<Long> ret=new ArrayList<>();
            List<Long> li =new ArrayList<>();
            String push="push";
            String pop="pop";
            for(int i=0;i<x.size();i++){
                if(operations.get(i).equals(push)){
                    push(x.get(i),ret,li);
                }else if(operations.get(i).equals(pop)){
                    pop(x.get(i),ret,li);
                }      
            }
            return li;
        }
        public static void push(long n,List<Long>ret,List<Long>li){//1
            ret.add(n);
            long max=Collections.min(ret); //1
            long min=Collections.max(ret); //1
            long prod=max*min;
            li.add(prod); //1
        }
        
        public static void pop(long n,List<Long>ret,List<Long>li){
            if(ret.contains(n)){
              li.remove(new Integer((int) n));
            }
            long max=Collections.min(ret);
            long min=Collections.max(ret);
            long prod=max*min;
            li.add(prod);
        
        }
    }
	public class MaxMinDataset {
	    public static void main(String[] args) throws IOException {
	        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

	        int operationsCount = Integer.parseInt(bufferedReader.readLine().trim());

	        List<String> operations = new ArrayList<>();

	        for (int i = 0; i < operationsCount; i++) {
	            String operationsItem = bufferedReader.readLine();
	            operations.add(operationsItem);
	        }

	        int xCount = Integer.parseInt(bufferedReader.readLine().trim());

	        List<Integer> x = new ArrayList<>();

	        for (int i = 0; i < xCount; i++) {
	            int xItem = Integer.parseInt(bufferedReader.readLine().trim());
	            x.add(xItem);
	        }

	        List<Long> result = esult.maxMin(operations, x);

	        for (int i = 0; i < result.size(); i++) {
	        	System.out.println(result.get(i));
	            if (i != result.size() - 1) {
	            	System.out.println("\n");
	            }
	        }


	        bufferedReader.close();
	    }
	}

